package network;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;

public class NetworkConnect {

	private static HttpClient httpClient = new DefaultHttpClient();

	public static void getData(HttpGet httpGetRequest) {
		try {
			HttpResponse httpResponse = httpClient.execute(httpGetRequest);
			
			if(httpResponse.getStatusLine().getStatusCode() != 200) {
				System.out.println("ERROR");
				break;
			}

			// Get hold of the response entity
			HttpEntity entity = httpResponse.getEntity();

			// If the response does not enclose an entity, there is no need
			// to bother about connection release
			byte[] buffer = new byte[1024];
			if (entity != null) {
				InputStream inputStream = entity.getContent();
				try {
					int bytesRead = 0;
					BufferedInputStream bis = new BufferedInputStream(inputStream);
					while ((bytesRead = bis.read(buffer)) != -1) {
						String chunk = new String(buffer, 0, bytesRead);
						System.out.println(chunk);
					}
				} catch (IOException ioException) {
					// In case of an IOException the connection will be released
					// back to the connection manager automatically
					ioException.printStackTrace();
				} catch (RuntimeException runtimeException) {
					// In case of an unexpected exception you may want to abort
					// the HTTP request in order to shut down the underlying
					// connection immediately.
					httpGetRequest.abort();
					runtimeException.printStackTrace();
				} finally {
					// Closing the input stream will trigger connection release
					try {
						inputStream.close();
					} catch (Exception ignore) {}
				}
			}
	    } catch (ClientProtocolException e) {
	    	// thrown by httpClient.execute(httpGetRequest)
	    	e.printStackTrace();
	    } catch (IOException e) {
	    	// thrown by entity.getContent();
	    	e.printStackTrace();
	    }
	}
	
	public static void closeConnection() {
    	// When HttpClient instance is no longer needed,
    	// shut down the connection manager to ensure
    	// immediate deallocation of all system resources
    	httpClient.getConnectionManager().shutdown();
	}
}
