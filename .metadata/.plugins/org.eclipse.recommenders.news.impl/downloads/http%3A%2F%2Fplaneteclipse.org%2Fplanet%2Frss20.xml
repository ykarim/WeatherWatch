<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet Eclipse</title>
	<link>http://planeteclipse.org/planet/</link>
	<language>en</language>
	<description>Planet Eclipse - http://planeteclipse.org/planet/</description>

<item>
	<title>Patrik Suzzi: Dynamic Menu Item to select Theme in Eclipse IDE</title>
	<guid isPermaLink="false">http://www.asegno.com/?p=886</guid>
	<link>http://www.asegno.com/2017/eclipse/dynamic-menu-item-to-select-theme-in-eclipse-ide/</link>
	<description>&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=515085&quot;&gt;Bug 514458&lt;/a&gt;, I added the “Theme” dynamic menu to the Eclipse IDE. This post explains how I did this.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_menu_eclipse_3_x_style&quot;&gt;Menu Eclipse 3.x style&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First edit the &lt;code&gt;plugin.xml&lt;/code&gt;, and add a menu contribution. With the locationURI &lt;code&gt;menu:org.eclipse.ui.appearance?after=org.eclipse.ui.window.appearance.separator1&lt;/code&gt;, you’ll contribute a submenu to the &lt;strong&gt;Window &amp;gt; Appearance&lt;/strong&gt; menu, just after the separator.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;&lt;a href=&quot;http://www.asegno.com/wp-content/uploads/2017/04/appearance-menu-structure.png&quot;&gt;&lt;img alt=&quot;appearance-menu-structure&quot; class=&quot;alignnone size-full wp-image-887&quot; height=&quot;262&quot; src=&quot;http://www.asegno.com/wp-content/uploads/2017/04/appearance-menu-structure.png&quot; width=&quot;742&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Add a &lt;strong&gt;Theme&lt;/strong&gt; menu under the menuContribution, and then add a child dynamic element.&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;&amp;lt;menuContribution
      locationURI=&quot;menu:org.eclipse.ui.appearance?after=org.eclipse.ui.window.appearance.separator1&quot;&amp;gt;
   &amp;lt;menu
         id=&quot;org.eclipse.ui.appearance.theme&quot;
         label=&quot;Theme&quot;&amp;gt;
      &amp;lt;dynamic
            class=&quot;org.eclipse.ui.internal.actions.ThemeDynamicMenu&quot;
            id=&quot;org.eclipse.ui.ide.dynamic1&quot;&amp;gt;
      &amp;lt;/dynamic&amp;gt;
   &amp;lt;/menu&amp;gt;
&amp;lt;/menuContribution&amp;gt;&lt;/pre&gt;&lt;p&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;Next, create the java class implementing the dynamic menu, and add mock code to verify the menu works.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;public class ThemeDynamicMenu extends ContributionItem {

	@Override
	public void fill(Menu menu, int index) {
		MenuItem menuItem = new MenuItem(menu, SWT.CHECK, index);
		menuItem.setText(&quot;Theme 1&quot;); //$NON-NLS-1$
		menuItem.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				// executed on menu select
				System.out.println(&quot;Selected&quot;); //$NON-NLS-1$
			}
		});
	}

}&lt;/pre&gt;&lt;p&gt; &lt;/p&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Verify the menu is displayed where you expect, and the submenu dynamic entries are working.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;&lt;a href=&quot;http://www.asegno.com/wp-content/uploads/2017/04/new-theme-dynamic-menu.png&quot;&gt;&lt;img alt=&quot;new-theme-dynamic-menu&quot; class=&quot;alignnone size-full wp-image-888&quot; height=&quot;222&quot; src=&quot;http://www.asegno.com/wp-content/uploads/2017/04/new-theme-dynamic-menu.png&quot; width=&quot;593&quot; /&gt;&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now remove the line which adds the “Theme 1” item, and rewrite the body of the widgetSelected.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The menu should have one menu item for each available theme, and each &lt;code&gt;widgetSelected(){…}&lt;/code&gt; should activate the corresponding theme.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The theme selection code is inspired tothe &lt;code&gt;ViewsPreferencePage&lt;/code&gt; one.&lt;/p&gt;&lt;pre class=&quot;crayon-plain-tag&quot;&gt;/**
 * Implements the Dynamic Menu to choose the Theme.
 */
public class ThemeDynamicMenu extends ContributionItem {

	private static String THEME_ID = &quot;THEME_ID&quot;; //$NON-NLS-1$

	private IThemeEngine engine;
	private boolean highContrastMode;

	public ThemeDynamicMenu() {
		IWorkbench workbench = PlatformUI.getWorkbench();
		MApplication application = workbench.getService(MApplication.class);
		IEclipseContext context = application.getContext();
		engine = context.get(IThemeEngine.class);
		highContrastMode = workbench.getDisplay().getHighContrast();
	}

	@Override
	public void fill(Menu menu, int index) {
		for (ITheme theme : engine.getThemes()) {
			if (!highContrastMode &amp;amp;&amp;amp; !Util.isGtk() &amp;amp;&amp;amp; theme.getId().equals(E4Application.HIGH_CONTRAST_THEME_ID)) {
				continue;
			}
			MenuItem menuItem = new MenuItem(menu, SWT.CHECK, index);
			menuItem.setText(theme.getLabel());
			menuItem.setData(THEME_ID, theme.getId());
			menuItem.addSelectionListener(new SelectionAdapter() {
				@Override
				public void widgetSelected(SelectionEvent e) {
					engine.setTheme(theme, !highContrastMode);
				}
			});
		}

		menu.addMenuListener(new MenuAdapter() {
			@Override
			public void menuShown(MenuEvent e) {
				for (MenuItem item : menu.getItems()) {
					boolean isActive = item.getData(THEME_ID).equals(engine.getActiveTheme().getId());
					item.setEnabled(!isActive);
					item.setSelection(isActive);
				}
			}
		});

	}

}&lt;/pre&gt;&lt;p&gt;Finally, launch the Eclipse IDE to check the menu works as expected.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.asegno.com/wp-content/uploads/2017/04/theming-menu.gif&quot;&gt;&lt;img alt=&quot;theming-menu&quot; class=&quot;alignnone size-full wp-image-895&quot; height=&quot;634&quot; src=&quot;http://www.asegno.com/wp-content/uploads/2017/04/theming-menu.gif&quot; width=&quot;1011&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
	<pubDate>Tue, 11 Apr 2017 17:23:55 +0000</pubDate>
</item>
<item>
	<title>Frank Appel: Clean Sheet Service Update</title>
	<guid isPermaLink="false">https://facon-biz.prossl.de/?p=13375</guid>
	<link>http://www.codeaffine.com/2017/04/11/clean-sheet-service-update/</link>
	<description>&lt;p&gt;Written by &lt;a href=&quot;http://www.codeaffine.com/author/fappel/&quot; rel=&quot;nofollow&quot;&gt;Frank Appel&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Early enough to pass as an easter gift we provide a Clean Sheet service update. The new version (0.5) is a simple bugfix release related to some &lt;code&gt;StyledText&lt;/code&gt; adapter problems on windows.&lt;/p&gt;
&lt;div class=&quot;notification lock cannothide&quot;&gt;&lt;div class=&quot;boximg infoimg&quot;&gt;&lt;/div&gt;&lt;h2&gt;The Clean Sheet Eclipse Design&lt;/h2&gt;

In case you've missed out on the topic and you are wondering what I'm talking about, here is a screenshot of my real world setup using the Clean Sheet theme (click on the image to enlarge).

&lt;a href=&quot;http://fappel.github.io/xiliary/clean-sheet-screenshot.html&quot;&gt;&lt;img alt=&quot;Eclipse IDE Look and Feel: Clean Sheet Screenshot&quot; class=&quot;alignnone size-full wp-image-12279&quot; height=&quot;408&quot; src=&quot;http://www.codeaffine.com/wp-content/uploads/2015/11/clean-sheet-eclipse-theme.png&quot; width=&quot;850&quot; /&gt;&lt;/a&gt;

For more information please refer to the features landing page at &lt;a href=&quot;http://fappel.github.io/xiliary/clean-sheet.html&quot; target=&quot;_blank&quot;&gt;http://fappel.github.io/xiliary/clean-sheet.html&lt;/a&gt;, read the introductory Clean Sheet feature description &lt;a href=&quot;http://www.codeaffine.com/2015/11/04/clean-sheet-an-ergonomic-eclipse-theme-for-windows-10/&quot;&gt;blog post&lt;/a&gt;, and check out the &lt;a href=&quot;http://fappel.github.io/xiliary/clean-sheet-new-and-noteworthy.html&quot; target=&quot;_blank&quot;&gt;New &amp;amp; Noteworthy&lt;/a&gt; page.&lt;/div&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;Clean Sheet Service Update&lt;/h2&gt;
&lt;p&gt;Thanks to the participation of dedicated users, we were able to spot and resolve some nuisances. On windows, the Mylyn task editor is working again with Bugzilla. Also on windows, line number updates in java editors are propageted again on vertical scrolling per mouse drag. Please refer to the issues &lt;a href=&quot;https://github.com/fappel/xiliary/issues/75&quot; target=&quot;_blank&quot;&gt;#75&lt;/a&gt; and &lt;a href=&quot;https://github.com/fappel/xiliary/issues/76&quot; target=&quot;_blank&quot;&gt;#76&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h2&gt;Clean Sheet Installation&lt;/h2&gt;

&lt;p&gt;Drag the 'Install' link below to your running Eclipse instance&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;drag&quot; href=&quot;http://marketplace.eclipse.org/marketplace-client-intro?mpc_install=2588223&quot; title=&quot;Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client&quot;&gt;&lt;img alt=&quot;Drag to your running Eclipse* workspace. *Requires Eclipse Marketplace Client&quot; class=&quot;img-responsive&quot; src=&quot;http://marketplace.eclipse.org/sites/all/themes/solstice/public/images/marketplace/btn-install.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;p&gt;Select Help &amp;gt; Install New Software.../Check for Updates.&lt;br /&gt;
P2 repository software site: @ &lt;a href=&quot;http://fappel.github.io/xiliary/&quot;&gt;http://fappel.github.io/xiliary/&lt;/a&gt;&lt;br /&gt;
Feature: Code Affine Theme&lt;/p&gt;

&lt;p&gt;After feature installation and workbench restart select the ‘Clean Sheet’ theme:&lt;br /&gt;
Preferences: General &amp;gt; Appearance &amp;gt; Theme: Clean Sheet&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h2&gt;On a Final Note, …&lt;/h2&gt;
&lt;p&gt;Of course, it’s interesting to hear suggestions or find out about potential issues that need to be resolved. Feel free to use the &lt;a href=&quot;https://github.com/fappel/xiliary/issues&quot; target=&quot;_blank&quot;&gt;Xiliary Issue Tracker&lt;/a&gt; or the comment section below for reporting.&lt;/p&gt;
&lt;p&gt;With this in mind, I’d like to thank all the Clean Sheet adopters for the support and wish everybody a happy easter egg hunt &lt;img alt=&quot;😉&quot; class=&quot;wp-smiley&quot; src=&quot;http://s.w.org/images/core/emoji/72x72/1f609.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/p&gt;
&lt;h6&gt;Title Image: © Depositphotos.com/piccola&lt;/h6&gt;
&lt;p&gt;The post &lt;a href=&quot;http://www.codeaffine.com/2017/04/11/clean-sheet-service-update/&quot; rel=&quot;nofollow&quot;&gt;Clean Sheet Service Update&lt;/a&gt; appeared first on &lt;a href=&quot;http://www.codeaffine.com&quot; rel=&quot;nofollow&quot;&gt;Code Affine&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Tue, 11 Apr 2017 11:31:49 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: EPLv2: A New Version of the Eclipse Public License</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/gTIWYU6JAIs/</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/gTIWYU6JAIs/</link>
	<description>Participate in the community discussion on the Eclipse Foundation's revised Eclipse Public License (EPL).&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/gTIWYU6JAIs&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 10 Apr 2017 15:00:00 +0000</pubDate>
</item>
<item>
	<title>Sebastian Zarnekow: Moving on</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-6255758224607466565.post-9069237360198255066</guid>
	<link>http://zarnekow.blogspot.com/2017/04/moving-on.html</link>
	<description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot;&gt;&lt;span id=&quot;docs-internal-guid-aef576b6-57ae-b6b1-d444-9d6b8d0ef9f9&quot;&gt;&lt;span style=&quot;font-family: Arial; font-size: 11pt; vertical-align: baseline; white-space: pre-wrap;&quot;&gt;After an exciting journey of 15 months as the Director Engineering at SMACC, I decided to move on. It was not an easy decision to make, though it’s still one that I wanted to make. In the past year I made many new friends, met great people, and had the chance to work in a super nice team. It was a great time with plenty of challenges, important learnings and great fun. But I also realized that I was missing the time as a technical consultant. Language engineering always was and still is a strong passion of mine. So I figured it’s about time to move on and refocus. Xtext, Eclipse, Language oriented programming - exciting times ahead. Keeping you posted ...&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;</description>
	<pubDate>Mon, 10 Apr 2017 11:46:13 +0000</pubDate>
	<author>noreply@blogger.com (Sebastian Zarnekow)</author>
</item>
<item>
	<title>Mike Milinkovich: EPLv2: A New Version of the Eclipse Public License</title>
	<guid isPermaLink="false">http://mmilinkov.wordpress.com/?p=1239</guid>
	<link>https://mmilinkov.wordpress.com/2017/04/07/eplv2-a-new-version-of-the-eclipse-public-license/</link>
	<description>&lt;p&gt;The Eclipse Foundation is in the process of revising the &lt;a href=&quot;https://www.eclipse.org/org/documents/epl-v10.php&quot; target=&quot;_blank&quot;&gt;Eclipse Public License&lt;/a&gt; (EPL). Refreshing a popular open source license is a big job, and one that we have been chipping away at for over a year.&lt;/p&gt;
&lt;p&gt;The EPL and its predecessor the &lt;a href=&quot;https://opensource.org/licenses/CPL-1.0&quot; target=&quot;_blank&quot;&gt;Common Public License&lt;/a&gt; have been around for about 16 years now. For a full presentation on the changes we are considering and their motivation, you can check out our &lt;a href=&quot;https://www.slideshare.net/MikeMilinkovich/eplv2-a-new-version-of-the-eclipse-public-license&quot; target=&quot;_blank&quot;&gt;presentation&lt;/a&gt;, or the &lt;a href=&quot;https://youtu.be/exhk6sS5_0I&quot; target=&quot;_blank&quot;&gt;video on YouTube&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Please get involved. Just as importantly, if you are a developer involved in the Eclipse community and ecosystem, encourage your colleagues in the legal department to get involved. The discussions are happening on the &lt;a href=&quot;http://dev.eclipse.org/mhonarc/lists/epl-discuss/&quot; target=&quot;_blank&quot;&gt;epl-discuss@eclipse.org&lt;/a&gt; mail list (&lt;a href=&quot;https://dev.eclipse.org/mailman/listinfo/epl-discuss&quot; target=&quot;_blank&quot;&gt;subscription required&lt;/a&gt;). The most recent public drafts of the EPLv2 can be found &lt;a href=&quot;http://dev.eclipse.org/mhonarc/lists/epl-discuss/msg00116.html&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;&lt;br /&gt;Filed under: &lt;a href=&quot;https://mmilinkov.wordpress.com/category/foundation/&quot;&gt;Foundation&lt;/a&gt;, &lt;a href=&quot;https://mmilinkov.wordpress.com/category/open-source/&quot;&gt;Open Source&lt;/a&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/mmilinkov.wordpress.com/1239/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/mmilinkov.wordpress.com/1239/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=mmilinkov.wordpress.com&amp;amp;blog=19461799&amp;amp;post=1239&amp;amp;subd=mmilinkov&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 07 Apr 2017 18:17:35 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: JSON Forms – Day 5 – Layouts</title>
	<guid isPermaLink="false">http://eclipsesource.com/blogs/?p=28066</guid>
	<link>http://eclipsesource.com/blogs/2017/04/07/json-forms-day-5-layouts/</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;JSON Forms is a framework for efficiently building form-based web UIs. These UIs, which are usually embedded in a business application, allow end users to enter, modify, and view data. JSON Forms eliminates the need to write HTML templates and Javascript for data binding by hand. It allows you to create customizable forms by leveraging the capabilities of JSON and &lt;/span&gt;&lt;a href=&quot;http://json-schema.org/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;JSON schema&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and providing a simple and declarative way of describing forms. Forms are then rendered with a UI framework, currently one that is based on AngularJS. If you would like to know more about JSON Forms, the &lt;/span&gt;&lt;a href=&quot;http://jsonforms.io&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;JSON Forms homepage&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; is a good starting point.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In this blog series, we would like to introduce the framework based on a real-world example application, a task tracker called “Make It happen”. On &lt;/span&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2016/12/21/json-forms-make-it-happen-blog-series-pilot/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;day 1&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and &lt;/span&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2016/12/27/json-forms-day-2-introducing-the-ui-schema/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;day 2&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, we described the overall requirements as well as created a fully working form for the entity “Task”. On &lt;/span&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/01/11/json-forms-day-3-extending-the-ui-schema/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;day 3&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; we showed how to extend the form with new attributes and controls. On &lt;/span&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/02/09/json-forms-day-4-visibility-rules/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;day 4&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; we introduced rule-based visibility of controls, based on the data, the user has entered.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;If you would like to follow this blog series please &lt;/span&gt;&lt;a href=&quot;https://twitter.com/jsonforms&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;follow us on twitter&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. This is where we will announce every new blog post regarding JSON Forms. After the first 4 days, the current form looks like this:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image10.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-medium wp-image-28069&quot; height=&quot;253&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image10-300x253.png&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;While the form is already fully functional, including data binding, validation, and even rule-based validation, the layout is definitely not optimal. Basically, we just see a vertical list of all controls. Therefore, in this blog post, we want to refine the layout using the JSON Forms layout elements.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;So far, we have embedded all controls into one root “VerticalLayout”. This type of layout always arranges its children vertically. However, JSON Forms also supports different layout types, e.g. “HorizontalLayout”. Of course, those layouts can be combined by embedding one layout element into another. For example to achieve a two column layout you can use a “HorizontalLayout” element which contains two “VerticalLayout” elements.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In our current form, we could save some vertical space by putting the “dueDate” attribute in one shared “HorizontalLayout” with the “rating” property. The same applies for “recurrence” and “recurrence_interval”. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The resulting UI schema looks like this:&lt;/span&gt;&lt;/p&gt;
 &lt;pre lang=&quot;JSON&quot;&gt;{
  &quot;type&quot;: &quot;VerticalLayout&quot;,
  &quot;elements&quot;: [
    {
      &quot;type&quot;: &quot;Control&quot;,
      &quot;label&quot;: false,
      &quot;scope&quot;: {
        &quot;$ref&quot;: &quot;#/properties/done&quot;
      }
    },
    {
      &quot;type&quot;: &quot;Control&quot;,
      &quot;scope&quot;: {
        &quot;$ref&quot;: &quot;#/properties/name&quot;
      }
    },
    {
      &quot;type&quot;: &quot;HorizontalLayout&quot;,
      &quot;elements&quot;: [
        {
          &quot;type&quot;: &quot;Control&quot;,
          &quot;scope&quot;: {
            &quot;$ref&quot;: &quot;#/properties/due_date&quot;
          }
        },
        {
          &quot;type&quot;: &quot;Control&quot;,
          &quot;scope&quot;: {
            &quot;$ref&quot;: &quot;#/properties/rating&quot;
          }
        }
      ]
    },
    {
      &quot;type&quot;: &quot;Control&quot;,
      &quot;scope&quot;: {
        &quot;$ref&quot;: &quot;#/properties/description&quot;
      },
      &quot;options&quot;: {
          &quot;multi&quot;:true
      }
    },
    {
      &quot;type&quot;: &quot;HorizontalLayout&quot;,
      &quot;elements&quot;: [
        {
          &quot;type&quot;: &quot;Control&quot;,
          &quot;scope&quot;: {
            &quot;$ref&quot;: &quot;#/properties/recurrence&quot;
          }
        },
        {
          &quot;type&quot;: &quot;Control&quot;,
          &quot;scope&quot;: {
            &quot;$ref&quot;: &quot;#/properties/recurrence_interval&quot;
          },
          &quot;rule&quot;: {
              &quot;effect&quot;: &quot;HIDE&quot;,
              &quot;condition&quot;: {
                  &quot;scope&quot;: {
                      &quot;$ref&quot;: &quot;#/properties/recurrence&quot;
                  },
                  &quot;expectedValue&quot;: &quot;Never&quot;
              }
          }
        }
      ]
    }
  ]
}
&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;So by simply moving things around a bit in the UI schema, we can produce the following layout:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image12.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-medium wp-image-28071&quot; height=&quot;188&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image12-300x188.png&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As you can imagine, it is pretty easy to produce more advanced layouts by just combining layout elements.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Please note, that EMF Forms supports more layout types than horizontal and vertical. As an example, you could use the element “Categorization” to separate controls into several sub categories. The following screenshot shows a rendered categorization element, where the attributes of a task are split into two tabs. Please note that the horizontal layout described before is now nested into the categorization.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image05.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-medium wp-image-28072&quot; height=&quot;145&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image05-300x145.png&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image14.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-medium wp-image-28073&quot; height=&quot;119&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image14-300x119.png&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The UI Schema for this layout is as follows:&lt;/span&gt;&lt;/p&gt;
 &lt;pre lang=&quot;JSON&quot;&gt;{
  &quot;type&quot;: &quot;Categorization&quot;,
  &quot;elements&quot;: [
    {
      &quot;type&quot;: &quot;Category&quot;,
      &quot;label&quot;: &quot;Main&quot;,
      &quot;elements&quot;: [
        {
          &quot;type&quot;: &quot;Control&quot;,
          &quot;label&quot;: false,
          &quot;scope&quot;: {
            &quot;$ref&quot;: &quot;#/properties/done&quot;
          }
        },
        {
          &quot;type&quot;: &quot;Control&quot;,
          &quot;scope&quot;: {
            &quot;$ref&quot;: &quot;#/properties/name&quot;
          }
        },
        {
          &quot;type&quot;: &quot;Control&quot;,
          &quot;scope&quot;: {
            &quot;$ref&quot;: &quot;#/properties/description&quot;
          },
          &quot;options&quot;: {
              &quot;multi&quot;:true
          }
        }
      ]
    },
    {
      &quot;type&quot;: &quot;Category&quot;,
      &quot;label&quot;: &quot;Additional&quot;,
      &quot;elements&quot;: [
        {
          &quot;type&quot;: &quot;HorizontalLayout&quot;,
          &quot;elements&quot;: [
            {
              &quot;type&quot;: &quot;Control&quot;,
              &quot;scope&quot;: {
                &quot;$ref&quot;: &quot;#/properties/due_date&quot;
              }
            },
            {
              &quot;type&quot;: &quot;Control&quot;,
              &quot;scope&quot;: {
                &quot;$ref&quot;: &quot;#/properties/rating&quot;
              }
            }
          ]
        },
        {
          &quot;type&quot;: &quot;HorizontalLayout&quot;,
          &quot;elements&quot;: [
            {
              &quot;type&quot;: &quot;Control&quot;,
              &quot;scope&quot;: {
                &quot;$ref&quot;: &quot;#/properties/recurrence&quot;
              }
            },
            {
              &quot;type&quot;: &quot;Control&quot;,
              &quot;scope&quot;: {
                &quot;$ref&quot;: &quot;#/properties/recurrence_interval&quot;
              },
              &quot;rule&quot;: {
                  &quot;effect&quot;: &quot;HIDE&quot;,
                  &quot;condition&quot;: {
                      &quot;scope&quot;: {
                          &quot;$ref&quot;: &quot;#/properties/recurrence&quot;
                      },
                      &quot;expectedValue&quot;: &quot;Never&quot;
                  }
              }
            }
          ]
        }
      ]
    }
  ]
}
&lt;/pre&gt; 
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Please refer to &lt;/span&gt;&lt;a href=&quot;http://jsonforms.io/#/docs/uischema&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;this page&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; for an overview of the available layout elements in JSON Forms.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As you might have noticed, the layout types of JSON Forms are a little different from what you know from HTML or any widget toolkit. As an example, there is no element called “tabbed layout”, but rather, it is called “Categorization”. The reason for this is that the UI Schema of JSON Forms is focussed on describing the structure of the layout rather than the actual rendering. The concrete visualization is the responsibility of the rendering component. This is analogous to the combination of HTML and CSS and allows for flexibility in rendering. As an example, the categorization element described above basically only specifies, that a form is split into several categories. The default renderer will translate this information into tabs. However, you could also implement an alternative renderer, which would display categories slightly differently, e.g. like this:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image04.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-medium wp-image-28074&quot; height=&quot;133&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image04-300x133.png&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image11.png&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-medium wp-image-28075&quot; height=&quot;108&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/uploads/2017/04/image11-300x108.png&quot; width=&quot;300&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Talking about alternative renderers: This is a core feature of JSON Forms! So far, we have just used the default renderer for controls as well as for layouts. In the next post, we will describe how to implement and plugin custom renderers in order to adapt the way in which a form is rendered. So stay tuned!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;If you are interested in trying out JSON Forms, please refer to the &lt;/span&gt;&lt;a href=&quot;http://github.eclipsesource.com/jsonforms/#/docs/firstform&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Getting-Started tutorial&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. This explains how to set up JSON Forms in your own project and how you can try out the first few steps yourself. If you would like to follow this blog series, please &lt;/span&gt;&lt;a href=&quot;https://twitter.com/jsonforms&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;follow us on twitter&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. We will announce every new blog post on JSON Forms there. If you need support for JSON Forms or if you are interested in new features, please feel free to &lt;/span&gt;&lt;a href=&quot;http://github.eclipsesource.com/jsonforms/#/support&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;contact us&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We hope to see you soon for the next day!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;List of all available days to date:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2016/12/21/json-forms-make-it-happen-blog-series-pilot/&quot;&gt;Day 0 and 1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2016/12/27/json-forms-day-2-introducing-the-ui-schema/&quot;&gt;Day 2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/01/11/json-forms-day-3-extending-the-ui-schema/&quot;&gt;Day 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/02/09/json-forms-day-4-visibility-rules/&quot;&gt;Day 4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2017/04/07/json-forms-day-5-layouts/&quot;&gt;Day 5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;&lt;div style=&quot;display: inline-block;&quot;&gt;&lt;a href=&quot;https://twitter.com/intent/tweet?source=webclient&amp;amp;text=JSON+Forms+%26%238211%3B+Day+5+%26%238211%3B+Layouts&amp;amp;via=eclipsesource&amp;amp;url=http://eclipsesource.com/blogs/2017/04/07/json-forms-day-5-layouts/&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;Share on Twitter&quot;&gt;&lt;img alt=&quot;Twitter&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/twitter.png&quot; title=&quot;Twitter&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://plus.google.com/share?url=http://eclipsesource.com/blogs/2017/04/07/json-forms-day-5-layouts/&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;+1&quot;&gt;&lt;img alt=&quot;Google+&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/google_plus.png&quot; title=&quot;Google+&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;http://www.linkedin.com/cws/share?url=http://eclipsesource.com/blogs/2017/04/07/json-forms-day-5-layouts/&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;Share on LinkedIn&quot;&gt;&lt;img alt=&quot;LinkedIn&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/linkedin.png&quot; title=&quot;LinkedIn&quot; /&gt;&lt;/a&gt;&lt;a href=&quot;https://www.facebook.com/sharer/sharer.php?u=http://eclipsesource.com/blogs/2017/04/07/json-forms-day-5-layouts/&amp;amp;t=JSON+Forms+%26%238211%3B+Day+5+%26%238211%3B+Layouts&quot; style=&quot;margin-right: 5px;&quot; target=&quot;_blank&quot; title=&quot;Facebook&quot;&gt;&lt;img alt=&quot;Facebook&quot; src=&quot;http://eclipsesource.com/blogs/wp-content/plugins/custom-about-author/images/social_media/facebook.png&quot; title=&quot;Facebook&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/04/07/json-forms-day-5-layouts/#respond&quot;&gt;Leave a Comment&lt;/a&gt;. Tagged with &lt;a href=&quot;http://eclipsesource.com/blogs/tag/angularjs/&quot; title=&quot;AngularJS Tag&quot;&gt;AngularJS&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/emf/&quot; title=&quot;emf Tag&quot;&gt;emf&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/forms/&quot; title=&quot;Forms Tag&quot;&gt;Forms&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/json/&quot; title=&quot;JSON Tag&quot;&gt;JSON&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/json-schema/&quot; title=&quot;JSON Schema Tag&quot;&gt;JSON Schema&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/angularjs/&quot; title=&quot;AngularJS Tag&quot;&gt;AngularJS&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/emf/&quot; title=&quot;emf Tag&quot;&gt;emf&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/forms/&quot; title=&quot;Forms Tag&quot;&gt;Forms&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/json/&quot; title=&quot;JSON Tag&quot;&gt;JSON&lt;/a&gt;, &lt;a href=&quot;http://eclipsesource.com/blogs/tag/json-schema/&quot; title=&quot;JSON Schema Tag&quot;&gt;JSON Schema&lt;/a&gt;&lt;p&gt;&lt;/p&gt;</description>
	<pubDate>Fri, 07 Apr 2017 06:55:45 +0000</pubDate>
</item>
<item>
	<title>Ian Skerrett: What is Eclipse?</title>
	<guid isPermaLink="false">http://ianskerrett.wordpress.com/?p=4063</guid>
	<link>http://feedproxy.google.com/~r/IanSkerrett/~3/c1JDIou00kE/</link>
	<description>&lt;p&gt;Last week we &lt;a href=&quot;https://www.surveymonkey.com/r/EclipseFdn&quot;&gt;launched a survey&lt;/a&gt; to solicit opinions about open source foundations and the general Eclipse community. A key thing we hope to accomplish with this survey is to gauge how people perceive the Eclipse brand? The Eclipse community has substantially grown and change over the last number of years, so we really want to know how people answer the question ‘What is Eclipse?’&lt;/p&gt;
&lt;p&gt;The survey has 16 questions and should take less than 5 minutes to complete. It would great to have as many Eclipse community members as possible to answer ‘&lt;a href=&quot;https://www.surveymonkey.com/r/EclipseFdn&quot;&gt;What is Eclipse?&lt;/a&gt;‘.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Eclipse Survey 1&quot; class=&quot;alignnone size-full wp-image-4071&quot; src=&quot;https://ianskerrett.files.wordpress.com/2017/04/eclipse-survey-1.png?w=450&quot; /&gt;&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/ianskerrett.wordpress.com/4063/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/ianskerrett.wordpress.com/4063/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=ianskerrett.wordpress.com&amp;amp;blog=405862&amp;amp;post=4063&amp;amp;subd=ianskerrett&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/IanSkerrett/~4/c1JDIou00kE&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 05 Apr 2017 17:19:53 +0000</pubDate>
</item>
<item>
	<title>JBoss Tools Team: JBoss Tools 4.4.4.AM2 for Eclipse Neon.3</title>
	<guid isPermaLink="true">https://tools.jboss.org/blog/4.4.4.am2-for-neon.3.html</guid>
	<link>https://tools.jboss.org/blog/4.4.4.am2-for-neon.3.html</link>
	<description>&lt;div&gt;&lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Happy to announce 4.4.4.AM2 (Developer Milestone 2) build for Eclipse Neon.3.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Downloads available at &lt;a href=&quot;https://tools.jboss.org/downloads/jbosstools/neon/4.4.4.AM2.html&quot;&gt;JBoss Tools 4.4.4 AM2&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#what-is-new&quot;&gt;&lt;/a&gt;What is New?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Full info is at &lt;a href=&quot;https://tools.jboss.org/documentation/whatsnew/jbosstools/4.4.4.AM2.html&quot;&gt;this page&lt;/a&gt;. Some highlights are below.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;docker-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#docker-tools&quot;&gt;&lt;/a&gt;Docker Tools&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;run-image-network-support&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#run-image-network-support&quot;&gt;&lt;/a&gt;Run Image Network Support&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A new page has been added to the Docker Run Image Wizard and Docker Run Image Launch configuration that allows
      the end-user to specify the network mode to use.  A user can choose from Default, Bridge, Host, None, Container,
      or Other.  If Container is selected, the user must choose from an active Container to use the same network mode.
      If Other is specified, a named network can be specified.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Network Mode&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/docker/images/docker_neon3_sprint129/LinuxToolsDockerNetworkMode.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Network Mode Configuration&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/docker/images/docker_neon3_sprint129/LinuxToolsDockerRunConfigNetworkMode.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;refresh-connection&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#refresh-connection&quot;&gt;&lt;/a&gt;Refresh Connection&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Users can now refresh the entire connection from the Docker Explorer View.  Refresh can be performed two ways:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;olist arabic&quot;&gt;
      &lt;ol class=&quot;arabic&quot;&gt;
      &lt;li&gt;
      &lt;p&gt;using the right-click context menu from the Connection&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;using the Refresh menu button when the Connection is selected&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ol&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Refresh Connection&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/docker/images/docker_neon3_sprint129/LinuxToolsDockerRefreshConnection.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;admonitionblock warning&quot;&gt;
      &lt;table&gt;
      &lt;tbody&gt;&lt;tr&gt;
      &lt;td class=&quot;icon&quot;&gt;
      &lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
      &lt;/td&gt;
      &lt;td class=&quot;content&quot;&gt;
      A late problem has been found between Neon.3 packages and Docker Tools packages. It has been fixed since then, but
      you need to install the latest Docker Tools bits from &lt;a class=&quot;bare&quot; href=&quot;http://download.eclipse.org/linuxtools/update-docker-2.3.1&quot;&gt;http://download.eclipse.org/linuxtools/update-docker-2.3.1&lt;/a&gt; if you want
      the best Docker Tools experience with Neon.3.
      &lt;/td&gt;
      &lt;/tr&gt;
      &lt;/tbody&gt;&lt;/table&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Enjoy!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Jeff Maury&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 05 Apr 2017 10:21:44 +0000</pubDate>
</item>
<item>
	<title>Wayne Beaton: Service Releases of Third Party Content in the Eclipse IP Due Diligence Process</title>
	<guid isPermaLink="false">http://waynebeaton.wordpress.com/?p=4752</guid>
	<link>https://waynebeaton.wordpress.com/2017/04/03/service-releases-of-third-party-content-in-the-eclipse-ip-due-diligence-process/</link>
	<description>&lt;p&gt;Some time ago, the Eclipse Foundation’s Board of Directors passed the following resolution.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;RESOLVED&lt;/strong&gt;, that previously approved dependencies of Eclipse projects can be&lt;br /&gt;
reviewed and approved by the EMO as follows:&lt;br /&gt;
a) Service releases (e.g. x.y., bug fixes, security fixes) will require no review.&lt;br /&gt;
b) Minor revisions (e.g. x..) will require a reduced review by the EMO.&lt;br /&gt;
c) Major revisions (e.g. ..) will require a full review by the EMO.&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;At the time the resolution was passed, it was decided that project teams would still be required to register the use of service releases for third party content with the Eclipse Intellectual Property (IP) team (i.e. create a &lt;a href=&quot;https://www.eclipse.org/projects/handbook/#ip-cq&quot;&gt;Contribution Questionnaire&lt;/a&gt;); it was decided that the resolution really only impacted how the IP Team would process the content: at least in theory, the IP Team would &lt;em&gt;rubber stamp&lt;/em&gt; requests for service releases. I say &lt;em&gt;in theory&lt;/em&gt;, because the IP Team would still eyeball these requests and sometimes invest some modest effort to ensure that significant new IP hadn’t been introduced.&lt;/p&gt;
&lt;p&gt;We’ve reconsidered this position.&lt;/p&gt;
&lt;p&gt;Project teams are &lt;em&gt;not required&lt;/em&gt; to engage with the Eclipse IP Team to review service releases for third party content, provided that the service release is based on a previously-approved release. This assumes that the providers of the third party content regard service releases in the manner described by Semantic Versioning (i.e. a patch of backwards-compatible bug fixes) and that the service release does not include significant new IP.  Of course, if a project team isn’t sure, they can always just submit the content for review anyway.&lt;/p&gt;
&lt;p&gt;We envision a scenario where project teams will take advantage of this for milestone builds, but then get full approval for final versions of their third party content. This isn’t required, but it is an option that’s available for project teams that feel that it’s necessary.&lt;/p&gt;
&lt;p&gt;For major and minor releases, the manner in which the the project team interacts with the Eclipse IP Team does not change. Note that it is implied that the &lt;em&gt;reduced review&lt;/em&gt; for minor releases follows an approved full review for a corresponding major release and that any service release follows an approved major or minor release.&lt;/p&gt;
&lt;p&gt;For more information, to add your thoughts and concerns, or to track our progress with regard to updating our documentation, add yourself in copy to &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=512465&quot;&gt;Bug 512465&lt;/a&gt;.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/waynebeaton.wordpress.com/4752/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/waynebeaton.wordpress.com/4752/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=waynebeaton.wordpress.com&amp;amp;blog=19425814&amp;amp;post=4752&amp;amp;subd=waynebeaton&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 03 Apr 2017 20:59:10 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Foundation at Devoxx France</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/QLHE8hQxik0/</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/QLHE8hQxik0/</link>
	<description>Devoxx France takes place in Paris on April 5-7, 2017. Be sure to register today!&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/QLHE8hQxik0&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 03 Apr 2017 15:00:05 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Introducing Eclipse Toolmaker's Day</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/csMRaO1ijvg/workshops</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/csMRaO1ijvg/workshops</link>
	<description>Created for the tools developer community, Eclipse Toolmaker's Day takes place on Wed April 26 2017 in Budapest, Hungary.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/csMRaO1ijvg&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 03 Apr 2017 15:00:00 +0000</pubDate>
</item>
<item>
	<title>Stephan Herrmann: Several Languages Java™ 8</title>
	<guid isPermaLink="false">http://objectteams.wordpress.com/?p=471</guid>
	<link>https://objectteams.wordpress.com/2017/04/02/several-languages-java-8/</link>
	<description>&lt;p&gt;More than 3 years ago, on March 18, 2014, Java™ 8 was released, and &lt;a href=&quot;https://www.eclipsecon.org/na2014/javaday.html&quot; target=&quot;_blank&quot;&gt;on the same day &lt;/a&gt;&lt;a href=&quot;https://www.eclipse.org/community/eclipse_newsletter/2014/january/article1.php&quot; target=&quot;_blank&quot;&gt;Eclipse released support for this new version&lt;/a&gt;. I have &lt;a href=&quot;https://www.eclipsecon.org/na2014/sites/default/files/slides/JDT%20Embraces%20Lambda%20Expressions%20-%20ECNA%202014.pdf&quot; target=&quot;_blank&quot; title=&quot;Slide 41 ff&quot;&gt;repeatedly&lt;/a&gt; made &lt;a href=&quot;https://wiki.eclipse.org/images/1/10/DemoCampMunich_Java8_2014.pdf&quot; target=&quot;_blank&quot; title=&quot;Slide 10&quot;&gt;the point&lt;/a&gt; that the Eclipse compiler for Java (&lt;strong&gt;ecj&lt;/strong&gt;) as a second implementation of &lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se8/html/&quot; target=&quot;_blank&quot;&gt;JLS&lt;/a&gt; (after javac) serves the entire Java community as a premier means for quality assurance.&lt;/p&gt;
&lt;p&gt;Today, in April 2017, I can report that this effort is still far from complete. Still, JLS, javac and ecj do not define the exact same language. Time to take stock what these differences are about.&lt;/p&gt;
&lt;p&gt;My own work on ecj focuses on an aspect that tries hard to remain invisible to casual users: &lt;a href=&quot;http://docs.oracle.com/javase/specs/jls/se8/html/jls-18.html&quot; target=&quot;_blank&quot;&gt;&lt;strong&gt;type inference&lt;/strong&gt;&lt;/a&gt;. It’s the heavy machinery behind generic methods, diamond expressions and lambdas, allowing users to omit explicit type information in many places, leaving it to the compiler to figure out the fine print.&lt;/p&gt;
&lt;p&gt;To be honest, when we first shipped support for Java 8, I was well expecting lots of bug reports to come in, which would point out corner cases of JLS that we hadn’t implemented correctly. There was one area, that I felt particularly uneasy about: how type inference blends with &lt;strong&gt;overload resolution&lt;/strong&gt;. During the Mars cycle of development Srikanth thankfully performed a major &lt;a href=&quot;https://bugs.eclipse.org/437444&quot; target=&quot;_blank&quot;&gt;rework and clean up&lt;/a&gt; of this exact area.&lt;br /&gt;
(I can’t pass the opportunity to report what I learned from this exercise: &lt;em&gt;&lt;a href=&quot;https://gbracha.blogspot.de/2009/09/systemic-overload.html&quot; target=&quot;_blank&quot;&gt;Overloading&lt;/a&gt; is a huge contributor of complexity in the Java language which in (not only) my opinion doesn’t carry its own weight — not a fraction of it&lt;/em&gt;).&lt;/p&gt;
&lt;h2&gt;We are not done with Java 8&lt;/h2&gt;
&lt;p&gt;The fact that still 2 years after that rework we constantly receive bug reports against Java 8 type inference is unsettling in a way.&lt;/p&gt;
&lt;p&gt;To give some numbers to it: during every 6-week milestone we fixed between 1 and 6 bugs in type inference. None of these bugs is solved in a coffee break, some compete for the title “toughest challenge I faced in my career”.&lt;/p&gt;
&lt;p&gt;We have a total of 103 bugs explicitly marked as 1.8 inference bugs. Of these&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;17 were resolved before Java 8 GA&lt;/li&gt;
&lt;li&gt;52 have been resolved in the three years since Java 8 GA&lt;/li&gt;
&lt;li&gt;34 are still unresolved today.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This will likely keep me busy for at least one more year.&lt;/p&gt;
&lt;p&gt;In the early days of Java 8 we could identify two clusters where behavioral differences between javac and ecj could be observed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;wildcard capture&lt;/li&gt;
&lt;li&gt;raw types&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(I’ll have a note about the latter at the &lt;a href=&quot;https://objectteams.wordpress.com/category/eclipse/feed/#rawtypes&quot;&gt;end of this post&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In these areas we could comfort ourselves by pointing to &lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8016207&quot; target=&quot;_blank&quot;&gt;known&lt;/a&gt; &lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8026527&quot; target=&quot;_blank&quot;&gt;bugs&lt;/a&gt; in javac. We even implemented code to conditionally mimic some of these javac bugs, but frankly, establishing bug compatibility is even more difficult than truthfully implementing a specification.&lt;/p&gt;
&lt;p&gt;Meanwhile, in the area of wildcard capture, javac has been significantly improved. Even though some of these fixes appear only in Java 9 early access builds, not in Java 8, we can observe both compilers converging, and given that the major bugs have been fixed, it is getting easier to focus on remaining corner cases. Good.&lt;/p&gt;
&lt;h2&gt;Java “8.1”&lt;/h2&gt;
&lt;p&gt;One event almost went under our radar: In February 2015 a &lt;a href=&quot;http://download.oracle.com/otndocs/jcp/java_se-8-mr-spec/index.html&quot; target=&quot;_blank&quot;&gt;revised version of JLS 8 &lt;/a&gt;was published. As part of this update, a few sentences have been added on behalf of &lt;a href=&quot;https://bugs.openjdk.java.net/browse/JDK-8038747&quot; target=&quot;_blank&quot;&gt;JDK-8038747&lt;/a&gt;. While the spec may be hard to grok by outsiders, the goal can be explained as enabling a compiler to include more type hints from the bodies of lambda expressions that are nested inside a generic method invocation.&lt;/p&gt;
&lt;p&gt;In fact, collecting type information from different levels in the AST was a big goal of the type inference rewrite in Java 8, but without the 2015 spec update, compilers weren’t even allowed to look into the body of a lambda, if the lambda does not specify types for its arguments.&lt;/p&gt;
&lt;div&gt;
&lt;table border=&quot;1&quot; class=&quot;code&quot; style=&quot;border-collapse: collapse;&quot;&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;otj&quot; style=&quot;font-family: monospace; text-align: center;&quot;&gt;m(a -&amp;gt; a.b())&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align: center; font-family: sans-serif;&quot;&gt;What do we know about b, while types for m and a are still unknown?&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;Conceptually, this is immensely tricky, because generally speaking, the code in the bodies of such type-elided lambdas can mean just about anything, while the signature of the lambda is not yet known. So we were happy about the spec update, as it promised to resolve a bunch of test cases, where javac accepts programs that ecj – without the update – was not able to resolve.&lt;/p&gt;
&lt;p&gt;Ever since, each improved version of ecj created a &lt;strong&gt;regression&lt;/strong&gt; for one or more of our dear users. We debugged no end, read between the lines of JLS, but couldn’t find a solution that would satisfy users in all cases. And they kept complaining that javac had no problems with their programs, even earlier versions of ecj accepted their program, so rejecting it now must be a regression.&lt;/p&gt;
&lt;h2&gt;“Switching the alliance”&lt;/h2&gt;
&lt;p&gt;Up-to that point, I saw our main ally in the authors of JLS, Dan Smith and Alex Buckley from Oracle. In particular Dan Smith has been a tremendous help in understanding JLS 8 and analyzing where our reading of it deviated from the authors’ intention. Together we identified not only bugs in my interpretation and implementation of JLS, but also several bugs in javac.&lt;/p&gt;
&lt;p&gt;When we iterated bugs relating to JDK-8038747 time and again, this approach was less effective, coming to no conclusion in several cases. I slowly realized, that we were reaching a level of detail that’s actually easier to figure out when working with an implementation, than at the specification level.&lt;/p&gt;
&lt;p&gt;This is when I started to seek advice from javac developers. Again, I received very valuable help, now mostly from Maurizio Cimadamore. Previously, my perception was, that JLS is the gold standard, and any deviation or even just liberal interpretation of it is bad. During the discussion with Maurizio I learned, that in some sense javac is actually “better” than JLS, not only in accepting more type-correct programs, but also in terms of better reflecting the intention of the JSR 335 experts.&lt;/p&gt;
&lt;p&gt;So I started to deliberately deviate from JLS, too. Instead of “blaming” javac for deviating from JLS, I now “blame” JLS for being incomplete wrt the intended semantics.&lt;/p&gt;
&lt;p&gt;To put this effort into proportion, please consider the figure of 103 bugs mentioned above. From these, 17 bugs have a reference to JDK-8038747. Coincidentally, this is the exact same number as those great bug reports prior to Java 8 GA, that gave us the huge boost, enabling us to indeed deliver a high quality implementation right on GA. In other words, this is a huge engineering effort, and we have no idea, how close to done we are. Will we face the next round of regressions on every new release we publish?&lt;/p&gt;
&lt;p&gt;If you work from a specification, there is a point where you feel confident that you did all that is required. Knowing that fulfilling the spec is not enough, it’s impossible to say, what &lt;em&gt;is&lt;/em&gt; “enough”.&lt;/p&gt;
&lt;h2&gt;What is “better”?&lt;/h2&gt;
&lt;p&gt;With wildcard captures and raw types, it was easy to argue, that certain programs &lt;em&gt;must&lt;/em&gt; be rejected by a compiler, because they are not type safe and can blow up at runtime in unexpected locations. In the area around JDK-8038747 javac tends to accept more programs than JLS, but here it would be unreasonable to expect javac to change and start rejecting these “good” programs.&lt;/p&gt;
&lt;p&gt;Still, calling out a competition of who accepts more “good” programs would be a bad idea, too, because this would completely abandon the goal of equivalence between compilers. After compiling with one compiler, one could never be sure that another compiler would also accept the same program. The term “Java” would loose its precise meaning.&lt;/p&gt;
&lt;p&gt;This implies, every attempt to better align ecj with javac, based on knowledge about the implementation and not based on JLS, should be seen as a temporary workaround. To resume its role of leadership, JLS must catch up with any improvements done in the implementation(s).&lt;/p&gt;
&lt;p&gt;To comfort the reader, I should say that in all cases discussed here, there’s always a safe fallback: when inference fails to find a solution, it is always possibly to help the compiler by adding some explicit type arguments (or argument types for a lambda). More importantly, such additions, which may be required for one compiler, should never cause problems for another compiler.&lt;/p&gt;
&lt;p&gt;Also note, that explicit type arguments are always to be preferred over type casts (which some people tend to use as a workaround): type arguments will help for effective type checking, whereas type casts &lt;em&gt;bypass&lt;/em&gt; type checking and can blow up at runtime.&lt;/p&gt;
&lt;h2&gt;Thanks and Sorry!&lt;/h2&gt;
&lt;p&gt;I wrote this post in the desire to reach out to our users.&lt;/p&gt;
&lt;p&gt;First: Each reproducible bug report is highly valuable; this is what drives JDT code towards higher and higher quality. By accumulating test cases from all these reports we gradually create a test suite that provides the best available safety net.&lt;/p&gt;
&lt;p&gt;Second: I am sorry about every regression introduced by any of our fixes, but as this post should explain, we are traveling uncharted territory: some of the corner cases we are currently addressing are not sufficiently covered by JLS. Additionally, type inference is inherently sensitive to the slightest of changes. Predicting, which programs will be affected by a given change in the implementation of type inference is near impossible.&lt;/p&gt;
&lt;p&gt;Yet, it’s certainly not a game of “them” vs “us”: JLS, javac, and ecj, we’re all in this together, and only by continuing to talk to each other, eventually we will all speak the same language, when we say “Java 8”. Please bear with us as the saga continues …&lt;/p&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;rawtypes&quot;&gt;PS: Another pet peeve&lt;/h2&gt;
&lt;p&gt;I am a type system enthusiast, mostly, because I like how type checkers can completely &lt;a href=&quot;https://www.eclipsecon.org/na2014/sites/default/files/slides/JDTEmbracesTypeAnnotations.pdf&quot; target=&quot;_blank&quot;&gt;eliminate entire categories of bugs&lt;/a&gt; from your programs. I like to give a guarantee that no code that is accepted by the compiler will ever fail at runtime with an exception like attempting to invoke a method that is not present on the receiver, or class cast exceptions in source code that doesn’t mention any class cast. Type inference is the tool that alleviates the verbosity of explicitly typed programs, while at the same time maintaining the same guarantees about type safety.&lt;/p&gt;
&lt;p&gt;Unfortunately, there is a class of Java programs for which such guarantees can not be given: if a program uses raw types, the compiler needs to generate lots of checkcast instructions, to make the code acceptable for the JVM. Each of these instructions can cause the program to blow up at runtime in totally unsuspicious locations.&lt;/p&gt;
&lt;p&gt;There are situations where javac silently assumes that a raw type List is a subtype of its parameterized form List&amp;lt;String&amp;gt;. This is wrong. Still I cannot just ignore this problem, because lots of “bugs” are reported against ecj, based on the observation that javac and ecj accept different programs, where in many cases the difference concerns the handling of raw types during type inference.&lt;/p&gt;
&lt;p&gt;Economically speaking, investigating in the subtleties of how Java 8 compilers handle raw types is a huge waste of efforts. Any one reading this: if you want to do me a favor, and thus help me to focus on the most relevant aspects of compiler development, please clean up your code. If you keep your code private, nobody will suffer except from yourself, but please, before posting a bug report against JDT, if your code example contains raw types, think thrice before submitting the report. Adding proper type arguments will certainly improve the quality of your code. Likely, after that exercise also ecj will be a lot happier with your code and give you correct answers.&lt;/p&gt;
&lt;p&gt;Do I need to repeat that raw types were a workaround for migrating towards Java 5? … that raw types were discouraged starting from day 1 of Java 5? If that doesn’t convince you, search on StackOverflow for questions mentioning raw types and type inference, and you will see that by the use of raw types you are basically disabling much of the power of type inference. Let’s &lt;em&gt;please&lt;/em&gt; shed the legacy of raw types.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/objectteams.wordpress.com/471/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/objectteams.wordpress.com/471/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=objectteams.wordpress.com&amp;amp;blog=52525906&amp;amp;post=471&amp;amp;subd=objectteams&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 02 Apr 2017 19:43:26 +0000</pubDate>
</item>
<item>
	<title>Melanie Bats: Back to the Future: Eclipse Converge &amp; Devoxx US</title>
	<guid isPermaLink="false">http://melb.enix.org/?p=436</guid>
	<link>http://melb.enix.org/general/back-to-the-future-eclipse-converge-devoxx-us/</link>
	<description>&lt;p&gt;Last week, &lt;a href=&quot;https://www.obeo.fr/en/&quot;&gt;Obeo&lt;/a&gt; sent me to San Jose, California to attend the 1st &lt;a href=&quot;https://www.eclipseconverge.org/na2017/&quot;&gt;Eclipse Converge&lt;/a&gt; and &lt;a href=&quot;https://devoxx.us/&quot;&gt;Devoxx US&lt;/a&gt; which was really cool of them. It makes sense to co-locate those events as both involved Java developers and open source projects. I really believe that these communities have so many things to share that this week in California would be a great occasion to learn from each other.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Back to the Future&quot; class=&quot;aligncenter&quot; src=&quot;https://github.com/mbats/mbats.github.io/blob/master/img/devoxxus/back_to_the_future.jpg?raw=true&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;eclipse-converge&quot;&gt;Eclipse Converge&lt;/h2&gt;
&lt;p&gt;I started my week by attending &lt;a href=&quot;https://www.eclipseconverge.org/na2017/&quot;&gt;Eclipse Converge&lt;/a&gt;, a one-day event dedicated to the Eclipse community and co-located with the IoT day.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Eclipse Converge &amp;amp; IoT day&quot; class=&quot;aligncenter&quot; src=&quot;https://github.com/mbats/mbats.github.io/blob/master/img/devoxxus/eclipse_converge_iot_day.jpg?raw=true&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The number of Eclipse committers present was amazing, which was particularly noticeable thanks to the Eclipse committer swag, a cool purple hoodie!&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Eclipse Committer Hoodie&quot; class=&quot;aligncenter&quot; src=&quot;https://github.com/mbats/mbats.github.io/blob/master/img/devoxxus/eclipse_hoodie.jpg?raw=true&quot; /&gt;&lt;/p&gt;
&lt;p&gt;One thing I noticed is that this year for the first time, they have it in women sizes! This is one of those little things which helps our community to become more diverse! Thanks Eclipse Foundation, I love it so much!&lt;/p&gt;
&lt;p&gt;As all Eclipse events, it was a great moment of social networking, attending high quality talks, meeting the usual suspects and getting the chance to exchange with american Eclipse community members.&lt;/p&gt;
&lt;h2 id=&quot;devoxx-us&quot;&gt;Devoxx US&lt;/h2&gt;
&lt;p&gt;The day after, &lt;a href=&quot;https://devoxx.us/&quot;&gt;Devoxx US&lt;/a&gt; started! It was a new chance for me to meet this extended community, as this was my first Devoxx ever and no doubt Devoxx is a great event. Thanks to the Eclipse Foundation for having gathered 700 attendees from 31 countries in the same place during 3 days. One of the important thing about Devoxx is that it is a vendor neutral event: not everything is related to Eclipse or a specific IDE, there’s a much wider diversity of content. Thanks to this, I’ve been able to attend many different demos based on different IDEs. This allowed me to notice some interesting differences:&lt;/p&gt;
&lt;p&gt;I loved the clean UI of VSCode,&lt;/p&gt;
&lt;p&gt;I appreciated the templates and the zoom in IntelliJ that allow fluent live coding demos,&lt;/p&gt;
&lt;p&gt;I was impressed by the &lt;a href=&quot;https://www.eclipseconverge.org/na2017/session/how-provide-portable-developer-workspace-eclipse-che&quot;&gt;talk by Stevan Lemeur and Florent Benoit&lt;/a&gt; and the easy setup of Eclipse Che thanks to CheFile and Factories! From just clicking on an hyperlink, it will provide you a complete IDE in your browser with all the tools, projects and source code you need. This opens a really cool possibility for open source projects who want to ease the effort to start contributing.&lt;/p&gt;
&lt;p&gt;I discovered the new stuff that will be relased in June with the next Eclipse Oxygen version. Wayne Beaton from the Eclipse Foundation and Gunnar Wagenknecht from SalesForce did an interesting &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/RNK-9521/Developing_Java_Applications_with_the_Eclipse_IDE,_Neon_Edition&quot;&gt;talk&lt;/a&gt; about all these useful projects existing or arriving: Code recommenders, ECLEmma, Graphviz editor, Improved UX with a better use of screen space (margins reduced, default styling…), support of Java9 and JUnit5, and a new Generic Editor becoming particularly useful combined with the Language Server Protocol.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Eclipse Oxygen&quot; class=&quot;aligncenter&quot; src=&quot;https://github.com/mbats/mbats.github.io/blob/master/img/devoxxus/eclipse_oxygen.jpg?raw=true&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;language-server-protocol&quot;&gt;Language Server Protocol&lt;/h2&gt;
&lt;p&gt;Until I heard about LSP, I did not realize how complex it is for language developers to get a good support and tooling of their language in all those different IDEs. A really clear introduction to LSP was given by Sven Efftinge from TypeFox who explained the origin, the status and the potential of LSP for the Eclipse community.&lt;img alt=&quot;Language Server Protocol Explained&quot; class=&quot;aligncenter&quot; src=&quot;https://github.com/mbats/mbats.github.io/blob/master/img/devoxxus/lsp.jpg?raw=true&quot; /&gt;Thanks to this talk, I now understand better the power of the LSP. Open sourced by Microsoft for VS Code, the Language Server Protocol is the new trend for language editors. In a few months, Microsoft, Red Hat, Codenvy and many others started collaborating to implement it for VS Code, Eclipse, Eclipse Che, Emacs and even Gnome builder! Only open source can create this kind of synergy and cooperation. In Eclipse, it results in three new projects that will be released with the next Eclipse Oxygen :&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://projects.eclipse.org/proposals/eclipse-lsp4e&quot;&gt;LSP4E&lt;/a&gt;: provides integration of language servers conforming to the Language Server Protocol into the Eclipse IDE.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://projects.eclipse.org/proposals/eclipse-lsp4j&quot;&gt;LSP4J&lt;/a&gt;: provides a reusable Java implementation of LSP. It implements the types as well as the communication, including serialization to and deserialization from JSON.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=497871&quot;&gt;Generic editor&lt;/a&gt;: supports easily new languages. For the next release, LSP will allow to get the same level of support for JS in Eclipse and VS Code. But even more when like me you are working on Domain Specific Language, this could be really powerful: imagine you’re developing your own DSL and you easily get support for it in all the editors. This is possible now thanks to Xtext Core. This is only the beginning, there are some remaining issues to solve around extensibility, creating a market place, supporting debug features… At the moment the LSP is dedicated to textual editors, I expect that one day it can be extended to graphical editors too!&lt;/p&gt;
&lt;h2 id=&quot;lessons-learned&quot;&gt;Lessons Learned&lt;/h2&gt;
&lt;p&gt;Open source allows to gather skilled people from different companies to develop together around a common goal. A conference like Devoxx allows you to advance your personal knowledge and to become an innovation agent in your own company. The organizers define it as a “Conference for developers by developers”. I attended many talks that highlighted how important it is in our domain to learn from our peers. &lt;a href=&quot;https://medium.com/@markog&quot;&gt;Marko Gargenta&lt;/a&gt; in his talk about &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/JVD-8929/Peer_Learning&quot;&gt;Peer Learning&lt;/a&gt; narrated his experience at Twitter and explained that there are different ways to share knowledge, classically by organizing techie classes but not only. One of the interesting things I remember from his talk is the need to share knowledge about technical aspects, but also about the company culture, for example by recounting what he named &lt;em&gt;War Stories&lt;/em&gt;. Ryan Sonnenberg talked about what they did to disseminate the knowledge at Uber while they scale. From his point of view, best practices shared by code reviews do not scale as an individual reviewing code cannot disseminate knowledge fast enough. The main point for him is to hook into the build system in order to enforce patterns and so eliminate the repetitive work and cumbersome manual processes: use static analysis, &lt;a href=&quot;http://findbugs.sourceforge.net/&quot;&gt;FindBugs&lt;/a&gt;, &lt;a href=&quot;http://fbinfer.com/docs/eradicate.html&quot;&gt;Infer:Eradicate&lt;/a&gt;, &lt;a href=&quot;https://github.com/typetools/checker-framework.demos/tree/master/presentations/2017-DevoxxUS&quot;&gt;checker framework&lt;/a&gt;… I attended three other good talks sharing best practices from the battlefield:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.slideshare.net/StevePoole/ten-simple-rules-for-writing-great-testcases-devoxx-us&quot;&gt;Ten simple rules for writing great test cases&lt;/a&gt; by Stuart Marks &amp;amp; Steve Poole: Rules to maximize your effort &amp;amp; protect investment in tests&lt;img alt=&quot;Ten simple rules for writing great testcases&quot; class=&quot;aligncenter&quot; src=&quot;https://github.com/mbats/mbats.github.io/blob/master/img/devoxxus/ten_simple_rule_for_wrinting_testcases.jpg?raw=true&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://haughtcodeworks.com/blog/software-development/prototyping-mindset/&quot;&gt;Prototyping mindset&lt;/a&gt; by Marty Haught: Invoke YAGNI whenever it makes sense and reduce the complexity of your solution!&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.eclipsecon.org/europe2016/content/testing-eclipse-plug-ins-lessons-field&quot;&gt;Test Lessons from the field&lt;/a&gt; and &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/RQL-8052/Effective_Unit_Testing&quot;&gt;Effective Unit Testing&lt;/a&gt; by Elliotte Rusty Harold, Simple and easy to follow advices for every day that could be summarized by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Separate your Eclipse/Non Eclipse code, your GUI/Non GUI projects,&lt;/li&gt;
&lt;li&gt;Test also your configuration files (plugin.xml, MANIFEST.MF, plugin.properties…),&lt;/li&gt;
&lt;li&gt;One of the most obvious advice but definitely worth to be heard when you found a bug first write a test and then fix the bug.&lt;/li&gt;
&lt;li&gt;And finally use Continuous Integration and code coverage tools like Cobertura or Jacoco.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;build&quot;&gt;Build&lt;/h2&gt;
&lt;p&gt;Build was also the topic of several excellent talks. I always use Maven just from habit and not really because I love it. That’s the case for most of us, we use it and hate it. Andy Gumbrecht proposed an intriguing ignite session by declaring &lt;a href=&quot;http://www.tomitribe.com/blog/2016/06/i-do-not-hate-apache-maven/&quot;&gt;I do not hate Maven&lt;/a&gt;. He explained that it is not useful to fight against Maven, when you have to do something with it just do it the Maven way. For him your pom hygiene is the key, it should read like a book, keep it clean and tidy. Manage your environment at the highest possible level in your top parent and invest in global properties to control it. Manage versions and not scopes. Groovy gives the ability to do anything at any stage of the build, so use it. And when you have a Maven issue, just remember that Google is your friend!&lt;/p&gt;
&lt;p&gt;I took the time to explore what other build systems can offer. An excellent tools in action was proposed by Baruch Sadogursky &amp;amp; Oleg Šelajev about &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/XFT-7496/Maven_v_Gradle:_Dawn_of_Project_Automation&quot;&gt;Maven vs Gradle&lt;/a&gt;, it was mostly a demo comparing the tools on the same project. At the end, my impression was that both provide the same features, it is more a matter of taste: Maven due to XML is very verbose and Gradle feels more readable/maintainable. For the ones using Eclipse like me, using the &lt;a href=&quot;https://www.eclipse.org/m2e/&quot;&gt;M2E&lt;/a&gt; plugin can help, for Gradle lovers, a thorough &lt;a href=&quot;https://github.com/diffplug/gradle-and-eclipse-rcp&quot;&gt;overview of the Gradle tooling available in Eclipse&lt;/a&gt; was done by Ned Twigg. To go further, and for whom performance matters, Ryan Sonnenberg during his session &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/SSI-8355/Building_at_Uber_scale&quot;&gt;Building at Uber scale&lt;/a&gt; talked about &lt;a href=&quot;https://github.com/uber/okbuck&quot;&gt;OkBuck&lt;/a&gt;, a plugin to use &lt;a href=&quot;https://buckbuild.com/&quot;&gt;Buck&lt;/a&gt; build system on Gradle project.&lt;/p&gt;
&lt;h2 id=&quot;jdk8&quot;&gt;JDK8&lt;/h2&gt;
&lt;p&gt;I took time also to inspect some classical APIs. My first astonishment is that : Yes it is possible to do a 1h talk only about &lt;a href=&quot;https://stuartmarks.files.wordpress.com/2017/03/optionalmotherofallbikesheds-devoxxbe2016.pdf&quot;&gt;Optional&lt;/a&gt;! Stuart Marks did it and it was pretty interesting. Going through examples, he declaimed the following seven rules which for sure have to be pinned to my wall :&lt;img alt=&quot;Optional - The Mother of all Bikesheds&quot; class=&quot;aligncenter&quot; src=&quot;https://github.com/mbats/mbats.github.io/blob/master/img/devoxxus/ten_simple_rule_for_wrinting_testcases.jpg?raw=true&quot; /&gt;One more talk I found useful is the one about &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/PEV-2089/Collections.compare(JDK,_Eclipse,_Guava,_Apache...)&quot;&gt;comparing the different Java Collections libraries&lt;/a&gt;. You know this doubt you have sometimes: should I use Java Collections? Guava? Eclipse Collections? Which one would be the most effective in my situation? The following summary can help you take a decision:&lt;img alt=&quot;Collections.compare&quot; class=&quot;aligncenter&quot; src=&quot;https://github.com/mbats/mbats.github.io/blob/master/img/devoxxus/collections_compare.jpg?raw=true&quot; /&gt;Stuart Marks again demonstrated the new features of collections in Java 8, as well as what’s coming in Java 9: &lt;a href=&quot;https://www.youtube.com/watch?v=LgR9ByD1dEw&quot;&gt;Collections Refueled&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;jdk9&quot;&gt;JDK9&lt;/h2&gt;
&lt;p&gt;As you guess, one of the hot topic during Devoxx was the new Java 9! Definitely, the next stop for the Java developers will be the upcoming release of the JDK9, on July, 27th. Notice that finally Oracle adjusted the versioning scheme: they will no longer be named 1.x! There were lots of Oracle talks about Jigsaw, the new modular way of coding. In fact, this is not that exciting, even more when you are working in the OSGI world as I do since many years now. For most Java developers, this seems mostly like something which looks painful as it might break everything. Trisha Gee did a great talk &lt;a href=&quot;https://www.youtube.com/watch?v=96vce1qd0QY&quot;&gt;Anticipating Java 9 functionnality &amp;amp; tooling&lt;/a&gt; presenting what we could expect more from Java 9 and demonstrates how IntelliJ already support it. Worth mentioning that Eclipse also already has support for JDK 9 thanks to the great work done by the IBM JDT team. They announced a special Eclipse update available at the end of July to support it the day of the JDK9 official release. So what are those little and big things I await for Java9 ?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Better everything: memory, performance, doc, faster compilation…&lt;/li&gt;
&lt;li&gt;New methods on stream API: takeWhile/DropWhile, List.of/Set.of/Map.of/Map.ofEntries&lt;/li&gt;
&lt;li&gt;HTML5 Javadoc&lt;/li&gt;
&lt;li&gt;Javadoc search&lt;/li&gt;
&lt;li&gt;Private static methods available in interface&lt;/li&gt;
&lt;li&gt;@Deprecated(since, forRemoval)&lt;/li&gt;
&lt;li&gt;New process API&lt;/li&gt;
&lt;li&gt;Java9 REPL: JShell&lt;/li&gt;
&lt;li&gt;Flow API which means that reactive programming is an important programming paradigm now and is really here to stay. You do not know yet what it means? Have a look at the good introduction by Venkat Subramaniam about &lt;a href=&quot;https://www.youtube.com/watch?v=weWSYIUdX6c&quot;&gt;Reactive Programming in Java&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;modern-web&quot;&gt;Modern web&lt;/h2&gt;
&lt;p&gt;I am not a web developer but I attended few interesting talks about modern web development as well, my top 3:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=VT4xsDCeDxE&quot;&gt;Binge streaming your web API&lt;/a&gt; by Audrey Neveu &amp;amp; Guillaume Laforge where I discovered the principle of Server-Sent Events and a great use of JSON patch.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.slideshare.net/yfain/angular-4-for-java-developers&quot;&gt;Angular2 for Java dev&lt;/a&gt; by Yakov Fain which demystifies the Angular framework.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://cfp.devoxx.us/2017/talk/NWB-0408/Is_Your_JavaScript_Ready_for_the_Enterprise%3F_What_Does_That_Even_Mean%3F&quot;&gt;Is your JavaScript ready for enterprise ?&lt;/a&gt; by John Brock who tought me to resist to the hype, to rediscover HTML5 and to choose between all the JS frameworks and libraries options.&lt;/p&gt;
&lt;h2 id=&quot;homeworks&quot;&gt;Homeworks&lt;/h2&gt;
&lt;p&gt;As usual coming back from a conference, I still have some homework to do now, I will just share what will be the next stops for me, I should have a look at:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/szczepiq/mockito-devoxx-2017&quot;&gt;Mockito 2&lt;/a&gt; : I have to re-try this popular mock framework which can be used in conjunction with JUnit to write even cleaner tests.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/christophd/citrus-demo-devoxx-us&quot;&gt;Cucumber &amp;amp; Citrus&lt;/a&gt; : was not able to attend this one, I am waiting for the video.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://cfp.devoxx.us/2017/talk/ZCD-4979/JUnit_5_-_The_New_Testing_Framework_for_Java_and_Platform_for_the_JVM&quot;&gt;JUnit5&lt;/a&gt; : one of the best news of this week, a complete redesign of the JUnit framework, that will arrive soon and well &lt;a href=&quot;https://www.eclipseconverge.org/na2017/sites/default/files/slides/Embracing%20JUnit%205%20with%20Eclipse.pdf&quot;&gt;integrated in Eclipse&lt;/a&gt; for the Oxygen.1 release for this fall.&lt;/p&gt;
&lt;h2 id=&quot;open-your-mind&quot;&gt;Open your mind&lt;/h2&gt;
&lt;p&gt;To conclude, DevoxxUS was really impressive in terms of technical contents. There were also lots of fun and unexpected sessions. I laughed out loud during the session about &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/OTY-5246/The_Business_of_Technology_Business_Technology&quot;&gt;the Business of Technology Business Technology&lt;/a&gt; by Chet Haase and the &lt;a href=&quot;http://javaposse.com/&quot;&gt;Java Posse&lt;/a&gt; live podcast and moreover I learned diverse things like &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/YOX-8173/Developer's_guide_to_HomeBrewing..._&quot;&gt;home brewering&lt;/a&gt; or &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/FEI-0558/How_NOT_to_restore_a_VW_Bus&quot;&gt;how to not restore a VW bus&lt;/a&gt;. Finally, I opened my mind to new horizons with great sessions about experiments around &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/NHF-2672/Personality_Is_the_New_Ringtone:_Experiments_in_AI_design&quot;&gt;AI design&lt;/a&gt;, &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/OHB-4306/Deep_learning_in_biomedicine:_challenges_and_opportunities&quot;&gt;deep learning&lt;/a&gt;, &lt;a href=&quot;http://cfp.devoxx.us/2017/talk/VUB-9615/New_Computer_Architectures_:_Explore_Quantum_Computers_&amp;amp;_SyNAPSE_neuromorphic_chips&quot;&gt;quantum computing&lt;/a&gt;! No doubt now I have to attend the other Devoxx in France, in Belgium and in US again. If you have the chance to attend &lt;a href=&quot;https://www.devoxx.fr/&quot;&gt;Devoxx France&lt;/a&gt; next week, come by to say ‘Hi’ to the Obeo guys at the &lt;a href=&quot;https://www.devoxx.fr/assets/images/plan_stands.jpg&quot;&gt;Eclipse Foundation booth 26&lt;/a&gt;. See you there in the future!&lt;img alt=&quot;Where we're going we don't need roads&quot; class=&quot;aligncenter&quot; src=&quot;https://github.com/mbats/mbats.github.io/blob/master/img/devoxxus/roads.jpg?raw=true&quot; /&gt;&lt;/p&gt;</description>
	<pubDate>Fri, 31 Mar 2017 12:15:50 +0000</pubDate>
</item>
<item>
	<title>PapyrusUML: An academic perspective on software product lines webinar</title>
	<guid isPermaLink="false">http://papyrusuml.wordpress.com/?p=595</guid>
	<link>https://papyrusuml.wordpress.com/2017/03/29/an-academic-perspective-on-software-product-lines-webinar/</link>
	<description>&lt;p&gt;On Friday, March 31&lt;sup&gt;th&lt;/sup&gt; at 16:00 CET, 15:00 GMT, and 11:00 EDT, the Papyrus Industry Consortium’s (Me-IC!) Research and Academia (“&lt;em&gt;PIC-RAC&lt;/em&gt;“) committee will host their fourth &lt;a href=&quot;https://wiki.polarsys.org/Papyrus_IC/Research_Academia/Webinars#Upcoming_webinars&quot; target=&quot;_blank&quot;&gt;webinar&lt;/a&gt; of the year.&lt;/p&gt;
&lt;p&gt;The topic is on an &lt;a href=&quot;https://wiki.polarsys.org/Papyrus_IC/Research_Academia/Webinars#.22Software_Product_Lines_and_Variability_Modelling.22_--_Academia_perspective&quot; target=&quot;_blank&quot;&gt;academic perspective on software product lines&lt;/a&gt; with speakers from Østfold University College, University of Passau, and TU Braunschweig.&lt;/p&gt;
&lt;p&gt;See this &lt;a href=&quot;https://wiki.polarsys.org/Papyrus_IC/Research_Academia/Webinars&quot;&gt;link&lt;/a&gt; for the connection information.&lt;/p&gt;&lt;br /&gt;Filed under: &lt;a href=&quot;https://papyrusuml.wordpress.com/category/papyrus-ic/&quot;&gt;Papyrus IC&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/category/papyrus-ic/research-and-academia/&quot;&gt;Research and Academia&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/category/webinar/&quot;&gt;webinar&lt;/a&gt; Tagged: &lt;a href=&quot;https://papyrusuml.wordpress.com/tag/academia/&quot;&gt;academia&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/tag/product-line/&quot;&gt;product-line&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/tag/webinar/&quot;&gt;webinar&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/papyrusuml.wordpress.com/595/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/papyrusuml.wordpress.com/595/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/papyrusuml.wordpress.com/595/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/delicious/papyrusuml.wordpress.com/595/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/papyrusuml.wordpress.com/595/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/facebook/papyrusuml.wordpress.com/595/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/papyrusuml.wordpress.com/595/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/twitter/papyrusuml.wordpress.com/595/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/papyrusuml.wordpress.com/595/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/stumble/papyrusuml.wordpress.com/595/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/papyrusuml.wordpress.com/595/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/digg/papyrusuml.wordpress.com/595/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/papyrusuml.wordpress.com/595/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/reddit/papyrusuml.wordpress.com/595/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=papyrusuml.wordpress.com&amp;amp;blog=72365150&amp;amp;post=595&amp;amp;subd=papyrusuml&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 29 Mar 2017 14:37:04 +0000</pubDate>
</item>
<item>
	<title>Roxanne Joncas: 4 New IoT Articles — Eclipse Newsletter</title>
	<guid isPermaLink="false">https://medium.com/p/9bbfb12b898e</guid>
	<link>https://medium.com/@roxanne.iot/4-new-iot-articles-eclipse-newsletter-9bbfb12b898e?source=rss-82f8afd3e513------2</link>
	<description>&lt;p&gt;Each month, I work with various technical experts to create and publish a new issue of the &lt;a href=&quot;https://www.eclipse.org/community/eclipse_newsletter/2017/march/&quot;&gt;&lt;strong&gt;Eclipse Newsletter&lt;/strong&gt;&lt;/a&gt;. The theme changes every month; this month it was Eclipse IoT! The articles feature four great IoT projects: Eclipse Hono, Eclipse ioFog, Eclipse Kapua, and Eclipse Vorto. Thank you to the authors for taking the time to write this content.&lt;/p&gt;&lt;figure&gt;&lt;a href=&quot;https://www.eclipse.org/community/eclipse_newsletter/2017/march/&quot;&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*c2B4w_J0qOWQ0nECFDVR2g.png&quot; /&gt;&lt;/a&gt;Eclipse Newsletter — Internet of all the Things&lt;/figure&gt;&lt;p&gt;&lt;a href=&quot;http://iot.eclipse.org/&quot;&gt;&lt;strong&gt;Eclipse IoT&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; &lt;/strong&gt;is growing quickly and becoming an influential open source IoT community. We now have over 30 members and over 25 projects. Just last month, a new Eclipse IoT project called &lt;a href=&quot;https://projects.eclipse.org/proposals/eclipse-ditto&quot;&gt;&lt;strong&gt;Eclipse Ditto&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt; &lt;/strong&gt;was proposed. If you’re interested in the Internet of Things, you should definitely look at the open source projects our community offers.&lt;/p&gt;&lt;p&gt;Now I’ll stop typing and let you read the IoT themed &lt;a href=&quot;https://www.eclipse.org/community/eclipse_newsletter/2017/march/&quot;&gt;&lt;strong&gt;Eclipse Newsletter&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Enjoy!&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=9bbfb12b898e&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 29 Mar 2017 11:54:19 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Provide Your Feedback | Eclipse Foundation Survey</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/jzDZ5BJi-AM/20170329_eclipsesurvey2017.php</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/jzDZ5BJi-AM/20170329_eclipsesurvey2017.php</link>
	<description>Provide your opinion on open source and the Eclipse Foundation. Take our survey today!&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/jzDZ5BJi-AM&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 29 Mar 2017 07:00:00 +0000</pubDate>
</item>
<item>
	<title>Webtools News: WTP 3.8.2 Released!</title>
	<guid isPermaLink="false">http://www.eclipse.org/webtools/news.php#permalink176</guid>
	<link>http://eclipse.org/webtools/releases/3.8.2</link>
	<description>&lt;div&gt;
    The Web Tools Platform's 3.8.2 Release is now available!  &lt;a href=&quot;https://wiki.eclipse.org/WTP_FAQ#How_do_I_install_WTP.3F&quot;&gt;Installation&lt;/a&gt; and update can be performed using the Neon Update Site at
    &lt;a href=&quot;http://download.eclipse.org/releases/neon/&quot;&gt;http://download.eclipse.org/releases/neon/&lt;/a&gt;, or the &lt;a href=&quot;http://www.eclipse.org/webtools/news/#permalink175&quot;&gt;Eclipse Marketplace&lt;/a&gt;.  Release 3.8.2 &lt;a href=&quot;https://www.eclipse.org/webtools/releases/3.8.2/&quot;&gt;fixes&lt;/a&gt; issues that occur in prior releases or have been reported since 3.8.1's release.
    WTP 3.8.2 is featured in the Neon.3
        &lt;a href=&quot;https://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/neon3&quot;&gt;Eclipse IDE for Java EE Developers&lt;/a&gt;, with selected features also included in &lt;a href=&quot;http://www.eclipse.org/downloads/compare.php&quot;&gt;other packages&lt;/a&gt;.  Adopters can download &lt;a href=&quot;http://download.eclipse.org/webtools/downloads/&quot;&gt;the build itself&lt;/a&gt; directly.
    &lt;/div&gt;&lt;p&gt;&lt;a href=&quot;http://www.eclipse.org/webtools/news.php#permalink176&quot;&gt;More news&lt;/a&gt;&lt;/p&gt;</description>
	<pubDate>Tue, 28 Mar 2017 15:01:00 +0000</pubDate>
</item>
<item>
	<title>Ian Skerrett: Work on IoT that Matters</title>
	<guid isPermaLink="false">http://ianskerrett.wordpress.com/?p=4007</guid>
	<link>http://feedproxy.google.com/~r/IanSkerrett/~3/rptkplmmBTo/</link>
	<description>&lt;p&gt;Tim O’Reilly use to talk a lot about encouraging people to ‘&lt;a href=&quot;http://radar.oreilly.com/2009/01/work-on-stuff-that-matters-fir.html&quot;&gt;Work on stuff that matters&lt;/a&gt;‘. Unfortunately, the IoT industry is often not the best example of this principle. The twitter feed ‘&lt;a href=&quot;https://twitter.com/internetofshit&quot;&gt;Internet of Shit&lt;/a&gt;‘ chronicles IoT solutions that should never have been built. For IoT to be successful we need more example of how IoT can make substantial and meaningful change in our lives.&lt;/p&gt;
&lt;p&gt;For this reason, I was encouraged and impressed by the recent &lt;a href=&quot;https://www.eclipse.org/org/press-release/openiotchallenge3_winners.php&quot;&gt;winners of the Eclipse IoT Developer Challenge&lt;/a&gt;.  All three winners and many of the participants are working on use cases that have significant impact. For example,&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Sleep analysis for mood disorders&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/inmoodforlife/in-the-mood-for-life-open-iot-challenge-final-report-a0c19482118c#.fgxnwhxqc&quot;&gt;InMoodforLife &lt;/a&gt;is an application to analyze sleep patterns of individuals affected by bipolar disorder. They are using off-the-shelf hardware components, open source software and deep learning research to analyze sleep patterns and then help predict mood disorders. The intent is to provide a solution that helps improve the approach for therapy and provide quicker treatment.  This solution will have a significant impact for the individuals and families.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Smarter farming&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://krishi-iot.blogspot.ca/2017/02/krishi-iot-final-report.html&quot;&gt;Krishi IoT&lt;/a&gt; is working to make farming more efficient and smarter. They are solving day-to-day issues experienced by farmers, like irrigation, crop diseases, pest protection and are building a solution that is accessible and affordable by all farmers.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Reduce your home energy bill&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://eneristics.wordpress.com/2017/02/27/rhds-final-report-what-we-accomplished/&quot;&gt;RHDS&lt;/a&gt; has taken on the challenge of creating a solution that will reduce home energy consumption, increase comfort and create a healthier living environment. They were able to demonstrate in near real-time, a solution to calculate and present the Key Metrics of a professional Energy Audit. They used algorithms from Building Science, open source software and low cost sensors to create a $200 solution that would normally be done by experts at a cost of $300-$500.&lt;/p&gt;
&lt;h3&gt;IoT Solutions that Matter&lt;/h3&gt;
&lt;p&gt;All three of these solutions are examples of Work on IoT that Matters. Congratulations to all these winners that are demonstrating the creativity and innovation that is possible through open hardware and open software. We are proud to have &lt;a href=&quot;https://iot.eclipse.org/&quot;&gt;Eclipse IoT&lt;/a&gt; involved in IoT Solutions that Matter.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/ianskerrett.wordpress.com/4007/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/ianskerrett.wordpress.com/4007/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=ianskerrett.wordpress.com&amp;amp;blog=405862&amp;amp;post=4007&amp;amp;subd=ianskerrett&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/IanSkerrett/~4/rptkplmmBTo&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 28 Mar 2017 14:45:51 +0000</pubDate>
</item>
<item>
	<title>itemis: Git Pro Tip: Show Branch in Command Line Prompt</title>
	<guid isPermaLink="true">https://blogs.itemis.com/en/git-pro-tip-show-branch-in-command-line-prompt</guid>
	<link>https://blogs.itemis.com/en/git-pro-tip-show-branch-in-command-line-prompt</link>
	<description>&lt;p&gt;I am a heavy Git on command line user. Since I work a lot with branches it is important to know which branch I am currently on. Here's a nifty trick for all of you juggling many branches simultaneously. While I could type &lt;code&gt;git branch&lt;/code&gt; every time and have a look at the result, this is pretty tedious. As there is always a command prompt visible on the command line, I was wondering what if the prompt instead of&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;MacDietrich:xtext-core dietrich$
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;would look like&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;MacDietrich:xtext-core[master] dietrich$
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;There is a solution for that: The magic &lt;code&gt;PS1&lt;/code&gt; environment variable that defines the prompt. We can simply change it to include the current git branch if there is one. I added following lines to my &lt;code&gt;~/.bash_profile&lt;/code&gt; file&lt;/p&gt; 
&lt;pre&gt;&lt;code&gt;parse_git_branch() {
    git branch 2&amp;gt; /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/[\1]/'
}
export PS1=&quot;\h:\W\$(parse_git_branch) \u$ &quot;
&lt;/code&gt;&lt;/pre&gt; 
&lt;p&gt;and reloaded the &lt;code&gt;~/.bash_profile&lt;/code&gt; file by typing &lt;code&gt;source ~/.bash_profile&lt;/code&gt;. &lt;/p&gt; 
&lt;p&gt;Problem solved.&lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fen%2Fgit-pro-tip-show-branch-in-command-line-prompt&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 28 Mar 2017 14:21:30 +0000</pubDate>
	<author>dietrich@itemis.de (Christian Dietrich)</author>
</item>
<item>
	<title>Kichwa Coders: Technical Debt: How Do You Unfork a Fork?</title>
	<guid isPermaLink="false">http://kichwacoders.com/?p=1697</guid>
	<link>https://kichwacoders.com/2017/03/28/technical-debt-how-do-you-unfork-a-fork/</link>
	<description>&lt;p&gt;&lt;img alt=&quot;filled_cirle_point_style_graph&quot; class=&quot; size-full wp-image-1906 aligncenter&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/03/filled_cirle_point_style_graph.png?w=840&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Everyone knows how to fork that interesting open source project, it’s simple and handy to do. What’s not so easy to do is to merge back a fork that has over the years taken on a life of its own and for many reasons has diverged drastically from the original repo.&lt;/p&gt;
&lt;p&gt;This is a case study of an ongoing project we are doing with SWT XYGraph, a visualisation project that is now part of Eclipse Nebula. It is the story of a fork of SWT XYGraph maintained by Diamond Light Source, the UK’s national synchrotron. But mostly it is a story about the efforts to merge the fork, reduce technical debt, and work towards the goal of sharing software components for Science, a key goal of the Eclipse Science Working Group.&lt;/p&gt;
&lt;h2&gt;Know Your History&lt;/h2&gt;
&lt;p&gt;One of the first things in this project was to understand the history – spanning 8 years – of the fork.  We knew the Diamond fork was done before SWT XYGraph became part of Nebula and under the Eclipse Foundation umbrella. The fork was made in order to quickly add in a number of new features that required some fundamental architectural changes to the code base.&lt;/p&gt;
&lt;p&gt;However on looking through the history, we found there were more than just 2 forks involved. The original project had been developed as part of Control System Studio (CSS) from Oakridge National Labs. CSS had in turn been forked by Diamond and customised for the local facility. Even though SWT XYGraph had been contributed to the Eclipse Nebula project, the original repo and many, many forks were still out there: more than enough forks for a dinner party. I can’t explain it any further in words so will dump our illegible working diagram of it all here:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;forks&quot; class=&quot;alignnone size-large wp-image-1849&quot; height=&quot;1024&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/03/forks.jpg?w=768&amp;amp;h=1024&quot; width=&quot;768&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Patches were pulled across and merged across forks when it was straightforward to do so. But with so many forks, this was a case where git history really mattered. Anywhere the history was preserved it was straightforward to track the origins of a specific feature – much harder in the cases where the history was lost. Git history is important, always worth some effort to preserve.&lt;/p&gt;
&lt;h2&gt;Choose Your Approach Carefully&lt;/h2&gt;
&lt;p&gt;Deciding if it worthwhile to merge a big fork takes some consideration. The biggest question to ask is: Are the architectural changes fundamentally resolvable? (Not like Chromium’s fork of Webkit – &lt;a href=&quot;https://en.wikipedia.org/wiki/Blink_(web_engine)&quot; target=&quot;_blank&quot;&gt;Blink&lt;/a&gt;). If that is a yes, then it’s a case of trading off the long-term benefits for the short term pain. In this case, Diamond knew it was something they wanted to do, more a matter of timing and picking the correct approach.&lt;/p&gt;
&lt;p&gt;Together there seemed to be 2 main ways to tackle removing the fork that was part of a mature product in constant use at the scientific facility.&lt;/p&gt;
&lt;p&gt;Option 1: Create a branch and work in parallel to get the branch working with upstream version, then merge the branch.&lt;/p&gt;
&lt;p&gt;Option 2: Avoid a branch, but work to incrementally make the fork and upstream SWT XYGraph plug-ins identical, then make the switch over to the upstream version.&lt;/p&gt;
&lt;p&gt;Option 1 had been tried before without success; there were too many moving parts and it created too much overhead, and ironically another fork to maintain. So it was clear this time Option 2 would be the way forward.&lt;/p&gt;
&lt;h2&gt;Tools are Your Friend&lt;/h2&gt;
&lt;p&gt;The incremental merging of the two needed to be done in a deliberate, reproducible manner to make it easier to trace back any issues coming up. Here are the tools that were useful in doing this.&lt;/p&gt;
&lt;h3&gt;1. Git Diff&lt;/h3&gt;
&lt;p&gt;The first step was to get an idea of the scale of the divergence, both quantitatively and qualitatively.&lt;/p&gt;
&lt;p&gt;For quantity, a rough and ready measure was obtained by using git diff:&lt;/p&gt;
&lt;pre class=&quot;brush: bash; title: ; notranslate&quot;&gt;$ git diff --shorstat &amp;lt;diamond&amp;gt; &amp;lt;nebula&amp;gt;
399 files changed, 15648 insertions(+), 15368 deletions(-)

$ git diff &amp;lt;diamond&amp;gt; &amp;lt;nebula&amp;gt; | wc -l
37874
&lt;/pre&gt;
&lt;h3&gt;2. Eclipse IDE’s JDT formatter&lt;/h3&gt;
&lt;p&gt;Next, we needed to remove diffs that were just down to formatting. For this using Eclipse IDE and the quick &amp;amp; easy formatting. Select “src” folder, choose Source menu -&amp;gt; Format. All code formatted to Eclipse standard in one go.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;format_src_folder&quot; class=&quot;alignnone size-full wp-image-1880&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/03/format_src_folder.png?w=840&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;3. Merge Tools&lt;/h3&gt;
&lt;p&gt;Then it was time to dive into the differences and group them into features, separating quick fixes from changes that broke APIs. For this we used the free and open &lt;a href=&quot;http://meldmerge.org/&quot; target=&quot;_blank&quot;&gt;meld&lt;/a&gt; on Linux.&lt;/p&gt;
&lt;h3&gt;3. EGit Goodness&lt;/h3&gt;
&lt;p&gt;Let’s say we found a line of code different in the fork. To work out where the feature had come from, we could use ‘&lt;a href=&quot;https://git-scm.com/docs/git-blame&quot; target=&quot;_blank&quot;&gt;git blame&lt;/a&gt;‘ but much nicer is the &lt;a href=&quot;http://www.vogella.com/tutorials/EclipseGit/article.html#see-git-information-line-by-line-aka-git-blame&quot; target=&quot;_blank&quot;&gt;eGit support in Eclipse IDE&lt;/a&gt;. Show annotations was regularly used to try to work out where that feature had come from, which fork it had been originally created on and then see if we could find any extra information such as bugzilla or JIRA tickets describing the feature. We were always grateful for code with good and helpful commit messages.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;egit_annotations.png&quot; class=&quot;alignnone size-full wp-image-1888&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/03/egit_annotations1.png?w=840&quot; /&gt;&lt;/p&gt;
&lt;h3&gt;3. Bug Tracking Tools&lt;/h3&gt;
&lt;p&gt;In this case we were using two different bug trackers: Bugzilla on the Eclipse Nebula side of things and JIRA on the Diamond side of things. As part of the merge, we were contributing lots and lots of distinct features to Nebula, we had a parent issue: &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=513865&quot; target=&quot;_blank&quot;&gt;Bug 513865&lt;/a&gt; to which we linked all the underlying fixes and features, aiming to keep each one distinct and standalone. At the time of writing that meant 21 dependent bugs.&lt;/p&gt;
&lt;h3&gt;4. Gerrits &amp;amp; Pull Requests&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://git.eclipse.org/r/#/q/project:nebula/org.eclipse.nebula+owner:jonah%2540kichwacoders.com&quot; target=&quot;_blank&quot;&gt;Gerrits&lt;/a&gt; were created for each bug for Eclipse Nebula. &lt;a href=&quot;https://github.com/DawnScience/swt-xy-graph/pull/11&quot; target=&quot;_blank&quot;&gt;Pull requests&lt;/a&gt; were created for each change going to Diamond’s DAWN (over 50 to date). Each was reviewed before being committed back. In many cases we took the opportunity to tidy code up or enhance it with things like standalone examples that could be used to demonstrate the feature.&lt;/p&gt;
&lt;h3&gt;5. Github Built-in Graphs&lt;/h3&gt;
&lt;p&gt;It was also good to use the built in Github built in Graphs  (on any repository click on ‘Graphs’ tab), first to see other forks out in the wild (&lt;a href=&quot;https://github.com/DawnScience/swt-xy-graph/network/members&quot; target=&quot;_blank&quot;&gt;Members tab&lt;/a&gt;):&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;members&quot; class=&quot;alignnone size-full wp-image-1834&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/03/members.png?w=840&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Then the ‘Network’ tab to keep track of the relationship with those forks compared to the main Diamond fork:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;networkgraph&quot; class=&quot;alignnone size-full wp-image-1833&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/03/networkgraph.png?w=840&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Much nicer than our hand-drawn effort from earlier, though in this case not all the code being dealt with was in Github.&lt;/p&gt;
&lt;h2&gt;Win/Win&lt;/h2&gt;
&lt;p&gt;The work is ongoing and we are getting to the tricky parts – the key reasons the forks were created in the first place – to make fundamental changes to the architecture. This will require some conversations to understand the best way forward. Already with the work that has been done, there has been mutual benefits: Diamond get new features and bug fixes developed in the open source and Eclipse Nebula get new features and bug fixes developed at Diamond Light Source. The &lt;a href=&quot;https://wiki.eclipse.org/Nebula/Releases/1.3.0/NaN&quot; target=&quot;_blank&quot;&gt;New &amp;amp; Noteworthy&lt;/a&gt; for Eclipse Nebula shows off screenshots of all the new features as a result of this merge.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Nebula_N&amp;amp;N_1.3_-_improved_mouse_cursors&quot; class=&quot;alignnone size-full wp-image-1839&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/03/nebula_nn_1-3_-_improved_mouse_cursors.png?w=840&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Going forward this paves the way for Diamond to not only get rid of duplicate maintenance of &amp;gt;30,000 lines of Java code (according to &lt;a href=&quot;https://github.com/AlDanial/cloc&quot; target=&quot;_blank&quot;&gt;cloc&lt;/a&gt;), but to contribute some significant features they have developed that integrate with SWT XYGraph. In doing so with the Eclipse Science Working Group it make a great environment to collaborate in open source and make advancements that benefit all involved.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/kichwacoders.wordpress.com/1697/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/kichwacoders.wordpress.com/1697/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=kichwacoders.com&amp;amp;blog=68353182&amp;amp;post=1697&amp;amp;subd=kichwacoders&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 28 Mar 2017 13:06:24 +0000</pubDate>
</item>

</channel>
</rss>
